name: Docker Build -> Docker Hub + AWS ECR -> Gitops (branch preview)

on:
  workflow_call:
    inputs:
      name:
        description: Friendly name of the app
        type: string
        required: true
      docker:
        description: Should run docker build
        type: boolean
        default: true
      docker-name:
        description: Name of the docker image
        type: string
        required: true
      docker-file:
        description: Location of Dockerfile
        type: string
      docker-platforms:
        description: Docker build platforms
        type: string
        default: linux/amd64
      helm-chart:
        description: Location of helm charts
        type: string
      github-repos-access:
        description: Allow access to other github repos (must provide PAT in secrets)
        type: boolean
        default: false
      gitops-repo:
        description: Repo for gitops
        type: string
        required: true
      gitops-name:
        description: Name of the gitops app
        type: string
        required: true
      gitops-values-script:
        description: Script to run during gitops (update values.yaml)
        type: string
      gitops-preview:
        description: Create preview
        type: boolean
        default: false
      gitops-preview-values:
        description: Values to create values.yaml
        type: string
      gitops-preview-values-script:
        description: Script to run during gitops (update values.preview.yaml)
        type: string
      certificate-issuer-name:
        type: string
        description: Name of issuer for cert-manager
      certificate-issuer-kind:
        type: string
        description: Kind (Issuer or ClusterIssuer) for cert-manager
        default: ClusterIssuer
      preview-domain:
        type: string
        description: Domain to use as the base for previews
    secrets:
      AWS_ASSUME_ROLE:
        required: true
      DOCKER_HUB_USERNAME:
        required: true
      DOCKER_HUB_PASSWORD:
        required: true
      GITOPS_REPO_PRIVATE_KEY:
        required: true
      GITHUB_REPOS_PAT:
        required: false
      SLACK_WEBHOOK_URL:
        required: true

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Set variables
      id: variables
      run: |
        SLUG=$(echo "${{ github.ref_name }}" | iconv -t ascii//TRANSLIT | sed -r s/[^a-zA-Z0-9]+/-/g | sed -r s/^-+\|-+$//g | tr A-Z a-z)
        REF=$(git rev-parse --short "$GITHUB_SHA")

        echo "repo=${{ inputs.docker-name }}" >> $GITHUB_OUTPUT
        echo "tag=$SLUG-$REF" >> $GITHUB_OUTPUT
        echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        echo "ref=$REF" >> $GITHUB_OUTPUT
        echo "slug=$SLUG" >> $GITHUB_OUTPUT

        echo "GITOPS_PREVIEW_DOMAIN=${{ inputs.gitops-name }}-$SLUG.${{ inputs.preview-domain }}" >> $GITHUB_ENV
        echo "GITOPS_WILDCARD_PREVIEW_DOMAIN=*.${{ inputs.gitops-name }}-$SLUG.${{ inputs.preview-domain }}" >> $GITHUB_ENV
        echo "GITOPS_CERTIFICATE_NAME=${{ inputs.gitops-name }}-$SLUG-tls" >> $GITHUB_ENV

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker
      if: inputs.docker
      id: docker-login
      uses: ovatu/actions/.github/actions/docker-login@main
      with:
        docker-hub-username: ${{ secrets.DOCKER_HUB_USERNAME }}
        docker-hub-password: ${{ secrets.DOCKER_HUB_PASSWORD }}
        aws-assume-role: ${{ secrets.AWS_ASSUME_ROLE }}

    - name: Allow access to other repos
      if: inputs.github-repos-access
      run: |
        git config --global url."https://${{ secrets.GITHUB_REPOS_PAT }}@github.com/".insteadOf ssh://git@github.com/
        git config --global url."https://${{ secrets.GITHUB_REPOS_PAT }}@github.com/".insteadOf git+ssh://git@github.com/

    - name: Build and push
      if: inputs.docker
      uses: docker/build-push-action@v4
      with:
        driver: docker
        file: deploy/kubernetes/docker/Dockerfile
        platforms: ${{ inputs.docker-platforms }}
        push: true
        tags: |
          ${{ steps.variables.outputs.repo }}:${{ steps.variables.outputs.tag }}
          ${{ steps.docker-login.outputs.ecr-registry }}/${{ steps.variables.outputs.repo }}:${{ steps.variables.outputs.tag }}
        build-args: |
          VERSION=${{ steps.variables.outputs.tag }}

    - name: Gitops
      uses: ovatu/actions/.github/actions/gitops-release@main
      with:
        name: ${{ inputs.gitops-name }}-${{ steps.variables.outputs.slug }}
        repository: ${{ inputs.gitops-repo }}
        repository-ssh-key: ${{ secrets.GITOPS_REPO_PRIVATE_KEY }}
        input-directory: ${{ inputs.helm-chart }}
        output-directory: apps/${{ inputs.gitops-name }}/branches/${{ steps.variables.outputs.slug }}
        message: "[Actions][Build] repo:${{ inputs.gitops-name }}, branch: ${{ steps.variables.outputs.branch }}, commit:${{ steps.variables.outputs.ref }}"
        values-script: |
          echo "BEGIN writing values"
          yq -i '.appVersion = "${{ steps.variables.outputs.tag }}"' Chart.yaml
          yq -i '.image.repository = "${{ steps.docker-login.outputs.ecr-registry }}/${{ steps.variables.outputs.repo }}"' values.yaml
          yq -i '.image.tag = "${{ steps.variables.outputs.tag }}"' values.yaml
          echo "DONE writing values"

          ${{ inputs.gitops-values-script }}
        preview: ${{ inputs.gitops-preview == true }}
        preview-values: ${{ inputs.gitops-preview-values }}
        preview-values-script: |
          echo "BEGIN preview script"
          touch values.yaml
          touch Chart.yaml
          mkdir -p templates

          export CHART_NAME=$(yq '.name' ../chart/Chart.yaml)
          export CHART_VERSION=$(yq '.version' ../chart/Chart.yaml)

          yq -i ".name = \"${{ inputs.gitops-name }}-${{ steps.variables.outputs.slug }}\"" Chart.yaml
          yq -i ".version = strenv(CHART_VERSION)" Chart.yaml
          yq -i ".dependencies[0].name = strenv(CHART_NAME)" Chart.yaml
          yq -i ".dependencies[0].version = strenv(CHART_VERSION)" Chart.yaml
          yq -i ".dependencies[0].repository = \"file://../chart\"" Chart.yaml
          yq -i ".dependencies[0].alias = \"preview\"" Chart.yaml
          
          rsync -vr --delete $GITHUB_ACTION_PATH/templates/ templates/

          yq -i ".namespace.enabled = true" values.yaml
          yq -i ".namespace.name = \"${{ inputs.gitops-name }}-${{ steps.variables.outputs.slug }}\"" values.yaml
          yq -i ".certificate.enabled = true" values.yaml
          yq -i ".certificate.name = \"${{ inputs.gitops-name }}-${{ steps.variables.outputs.slug }}-certificate\"" values.yaml
          yq -i ".certificate.secretName = \"${{ inputs.gitops-name }}-${{ steps.variables.outputs.slug }}-tls\"" values.yaml
          yq -i ".certificate.issuerRef.name = \"${{ inputs.certificate-issuer-name }}\"" values.yaml
          yq -i ".certificate.issuerRef.kind = \"${{ inputs.certificate-issuer-kind }}\"" values.yaml
          yq -i ".certificate.domain = \"${{ inputs.gitops-name }}-${{ steps.variables.outputs.slug }}.${{ inputs.preview-domain }}\"" values.yaml
          echo "DONE preview script"

          ${{ inputs.gitops-preview-values-script }}

    - name: Send Slack preview webhook
      if: ${{ inputs.gitops-preview }}
      uses: slackapi/slack-github-action@v1.23.0
      with:
        payload: |
          {
            "text": "Preview deployed: ${{ inputs.name }} / ${{ steps.variables.outputs.branch }}: ${{ steps.variables.outputs.ref }}",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "Preview deployed: ${{ inputs.name }} / ${{ steps.variables.outputs.branch }}"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ${{ toJson(github.event.head_commit.message || 'No message') }}
                }
              },
              {
                "type": "divider"
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "*App:* ${{ inputs.gitops-name }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Version:* ${{ steps.variables.outputs.tag }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Repo:* ${{ github.repository }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Branch:* ${{ steps.variables.outputs.branch }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Commit:* ${{ steps.variables.outputs.ref }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Link:* https://${{ inputs.gitops-name }}-${{ steps.variables.outputs.slug }}.${{ inputs.preview-domain }}"
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

    - name: Send Slack build webhook
      if: ${{ !inputs.gitops-preview }}
      uses: slackapi/slack-github-action@v1.23.0
      with:
        payload: |
          {
            "text": "Branch built: ${{ inputs.name }} / ${{ steps.variables.outputs.branch }}: ${{ steps.variables.outputs.ref }}",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "Branch built: ${{ inputs.name }} / ${{ steps.variables.outputs.branch }}"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ${{ toJson(github.event.head_commit.message || 'No message') }}
                }
              },
              {
                "type": "divider"
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "*App:* ${{ inputs.gitops-name }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Version:* ${{ steps.variables.outputs.tag }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Repo:* ${{ github.repository }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Branch:* ${{ steps.variables.outputs.branch }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Commit:* ${{ steps.variables.outputs.ref }}"
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK